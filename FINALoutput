#include <iostream>
#include <fstream>
#include <vector>
#include <iomanip>
#include <string>
using namespace std;

// structure to store product details
struct Product {
    string id;
    string name;
    string category;
    int quantity;
    double price;
};

// vector to store inventory data
vector<Product> inventory;

// function to load inventory data from file
void loadFromFile() {
    ifstream file("inventory.dat");
    Product p;
    inventory.clear();
    while (file >> p.id >> ws && getline(file, p.name) && getline(file, p.category) && file >> p.quantity >> p.price) {
        inventory.push_back(p);
    }
    file.close();
}

// function to save inventory data to file
void saveToFile() {
    ofstream file("inventory.dat");
    for (unsigned int i = 0; i < inventory.size(); i++) {
        file << inventory[i].id << endl
             << inventory[i].name << endl
             << inventory[i].category << endl
             << inventory[i].quantity << " " << inventory[i].price << endl;
    }
    file.close();
}

// function to add a new product to the inventory
void addProduct() {
    Product p;
    
    cout << "=====add product=====\n";
    cout << "enter product id: ";
    cin >> p.id;
    cin.ignore();

    cout << "enter product name: ";
    getline(cin, p.name);

    cout << "enter category: ";
    getline(cin, p.category);

    cout << "enter quantity: ";
    while (true) {
        cin >> p.quantity;
        
        // validate input for quantity
        if (cin.fail() || p.quantity < 0 || cin.peek() != '\n') {
            cin.clear();
            cin.ignore(1000, '\n');
            cout << "invalid input! whole numbers only.\nenter quantity: ";
        } else {
            break;
        }
    }

    cout << "enter price: ";
    while (true) {
        cin >> p.price;

        // validate input for price
        if (cin.fail() || p.price < 0 || cin.peek() != '\n') {
            cin.clear();
            cin.ignore(1000, '\n');
            cout << "invalid input! whole numbers or decimals only.\nenter price: ";
        } else {
            break;
        }
    }

    // add product to inventory and save
    inventory.push_back(p);
    saveToFile();
    cout << "product added successfully.\n";
}

// function to update stock for a product
void updateStock() {
    string id;
    int change;
    char type;

    cout << "=====update stock=====\n";
    cout << "enter product id: ";
    cin >> id;
    bool found = false;

    for (unsigned int i = 0; i < inventory.size(); i++) {
        if (inventory[i].id == id) {
            found = true;
            cout << "stock in (i) or stock out (o)? ";
            cin >> type;
            cout << "enter quantity: ";
            cin >> change;

            if (type == 'i') {
                inventory[i].quantity += change;
                cout << "stock updated.\n";
            } else if (type == 'o') {
                if (change > inventory[i].quantity) {
                    cout << "not enough stock.\n";
                } else {
                    inventory[i].quantity -= change;
                    cout << "stock updated.\n";
                }
            } else {
                cout << "invalid option.\n";
            }

            saveToFile();
            break;
        }
    }

    if (!found) cout << "product not found.\n";
}

// function to search for a product by id or name
void searchProduct() {
    int option;

    cout << "=====search product=====\n";
    cout << "search by (1. id) or (2. name): ";
    cin >> option;
    cin.ignore();
    bool found = false;

    if (option == 1) {
        string id;
        cout << "enter product id: ";
        cin >> id;
        for (unsigned int i = 0; i < inventory.size(); i++) {
            if (inventory[i].id == id) {
                cout << "found: " << inventory[i].name << " (" << inventory[i].category << "), quantity: " << inventory[i].quantity << ", price: $" << inventory[i].price << endl;
                found = true;
                break;
            }
        }
    } if (option == 2) {
        string name;
        cout << "enter product name: ";
        getline(cin, name);
        for (unsigned int i = 0; i < inventory.size(); i++) {
            if (inventory[i].name == name) {
                cout << "found: " << inventory[i].id << " (" << inventory[i].category << "), quantity: " << inventory[i].quantity << ", price: $" << inventory[i].price << endl;
                found = true;
                break;
            }
        }
    } else {
        cout << "invalid input!";
        return;
    }

    if (!found) cout << "product not found.\n";
}

// function to display all products in inventory
void displayAll() {
    cout << setw(10) << "id" << setw(20) << "name" << setw(15) << "category"
         << setw(10) << "qty" << setw(10) << "price" << endl;
    cout << string(65, '-') << endl;
    for (unsigned int i = 0; i < inventory.size(); i++) {
        cout << setw(10) << inventory[i].id << setw(20) << inventory[i].name << setw(15) << inventory[i].category
             << setw(10) << inventory[i].quantity << setw(10) << fixed << setprecision(2) << inventory[i].price << endl;
    }
}

// function to calculate total inventory value
void calculateInventoryValue() {
    double total = 0;
    for (unsigned int i = 0; i < inventory.size(); i++) {
        total += inventory[i].quantity * inventory[i].price;
    }
    cout << "total inventory value: " << fixed << setprecision(2) << total << " pesos" << endl;
}

// function to delete a product from inventory
void deleteProduct() {
    string id;
    cout << "enter product id to delete: ";
    cin >> id;
    bool found = false;

    for (vector<Product>::iterator it = inventory.begin(); it != inventory.end(); ++it) {
        if (it->id == id) {
            inventory.erase(it);
            saveToFile();
            cout << "product deleted.\n";
            found = true;
            break;
        }
    }

    if (!found) cout << "product not found.\n";
}

// function to validate user input for main menu
bool isValidChoice(const string& input, int& choice) {
    // check if input is only 1 to 7
    if (input.length() == 1 && isdigit(input[0])) {
        choice = input[0] - '0';
        return choice >= 1 && choice <= 7;
    }
    return false;
}

// main function to run the inventory system
int main() {
    loadFromFile();
    int choice;
    string input;

    do {
        cout << "\n======= inventory of items ========\n";
        cout << "1. add new product\n";
        cout << "2. update stock\n";
        cout << "3. search product\n";
        cout << "4. display all products\n";
        cout << "5. calculate inventory value\n";
        cout << "6. delete product\n";
        cout << "7. exit\n";
        cout << "\nselect an option (1 to 7): ";
        
        getline(cin, input);

        if (!isValidChoice(input, choice)) {
            cout << "invalid input! enter a whole number between 1 and 7 only.\n";
            continue;
        }        

        switch (choice) {
            case 1: addProduct(); break;
            case 2: updateStock(); break;
            case 3: searchProduct(); break;
            case 4: displayAll(); break;
            case 5: calculateInventoryValue(); break;
            case 6: deleteProduct(); break;
            case 7: cout << "exiting system.\n"; break;
        }

    } while (choice != 7);

    return 0;
}
